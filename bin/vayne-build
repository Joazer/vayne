#!/usr/bin/env node
const ora = require('ora')
const rm = require('rimraf')
const chalk = require('chalk')
const webpack = require('webpack')

const cwd = process.cwd()
const config = require('../lib/utils/config')(process.env.NODE_ENV || 'production', cwd)
const paths = require('../lib/utils/path')(cwd)
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = config.build.env.NODE_ENV || 'production'
}

// 别的参数
const argv = require('yargs') // eslint-disable-line
  .usage('Usage: vayne server [options]')
  .option('R', {
    alias: 'report',
    describe: 'View the bundle analyzer report after build finishes',
    type: 'boolean',
    default: false
  })
  .help('h')
  .argv

const webpackConfig = require('../lib/webpack.config/webpack.prod.conf')(argv, config, paths)

const spinner = ora('building for production...')
spinner.start()
console.log(paths.resolveApp(config.build.assetsRoot), webpackConfig)
rm(paths.resolveApp(config.build.assetsRoot), err => {
  if (err) throw err
  webpack(webpackConfig, function (err, stats) {
    spinner.stop()
    if (err) throw err
    process.stdout.write(stats.toString({
      colors: true,
      modules: false,
      children: false,
      chunks: false,
      chunkModules: false
    }) + '\n\n')

    if (stats.hasErrors()) {
      console.log(chalk.red('  Build failed with errors.\n'))
      process.exit(1)
    }

    console.log(chalk.cyan('  Build complete.\n'))
    console.log(chalk.yellow(
      '  Tip: built files are meant to be served over an HTTP server.\n' +
      '  Opening index.html over file:// won\'t work.\n'
    ))
  })
})
