#!/usr/bin/env node
const opn = require('opn')
const path = require('path')
const express = require('express')
const webpack = require('webpack')
const proxyMiddleware = require('http-proxy-middleware')
const getConfig = require('../lib/utils/config')
const cwd = process.cwd()
const config = getConfig(process.env.NODE_ENV || 'development', cwd)
const paths = require('../lib/utils/path')(cwd)

if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = config.dev.env.NODE_ENV || 'development'
}

// 别的参数
const argv = require('yargs') // eslint-disable-line
  .usage('Usage: vayne server [options]')
  .option('P', {
    alias: 'port',
    describe: '服务端口号',
    type: 'string'
  })
  .option('O', {
    alias: 'openBrowser',
    describe: '是否打开浏览器',
    type: 'boolean',
    default: false
  })
  .help('h')
  .argv

const webpackConfig = require('../lib/webpack.config/webpack.dev.conf')(argv, config, paths)
console.log(JSON.stringify(webpackConfig))

// default port where dev server listens for incoming traffic
const PORT = argv.port || config.dev.port || 8000

// automatically open browser, if not set will be false
const autoOpenBrowser = argv.openBrowser || !!config.dev.autoOpenBrowser

// Define HTTP proxies to your custom API backend
// https://github.com/chimurai/http-proxy-middleware
const proxyTable = config.dev.proxyTable

const app = express()
const compiler = webpack(webpackConfig)
console.log(webpackConfig.output.publicPath)
const devMiddleware = require('webpack-dev-middleware')(compiler, {
  publicPath: webpackConfig.output.publicPath,
  quiet: true
})

const hotMiddleware = require('webpack-hot-middleware')(compiler, {
  log: false,
  heartbeat: 2000
})
// force page reload when html-webpack-plugin template changes
// currently disabled until this is resolved:
// https://github.com/jantimon/html-webpack-plugin/issues/680
// compiler.plugin('compilation', function (compilation) {
//   compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {
//     hotMiddleware.publish({ action: 'reload' })
//     cb()
//   })
// })

// enable hot-reload and state-preserving
// compilation error display
app.use(hotMiddleware)

// proxy api requests
Object.keys(proxyTable).forEach(function (context) {
  let options = proxyTable[context]
  if (typeof options === 'string') {
    options = { target: options }
  }
  app.use(proxyMiddleware(options.filter || context, options))
})

// handle fallback for HTML5 history API
app.use(require('connect-history-api-fallback')())

// serve webpack bundle output
app.use(devMiddleware)

// serve pure static assets 这里需要修改成客户端原有的
const staticPath = path.posix.join(paths.appDirectory, config.dev.assetsSubDirectory)
app.use(staticPath, express.static('./static'))

const uri = 'http://localhost:' + PORT

var _resolve
var _reject
var readyPromise = new Promise((resolve, reject) => {
  _resolve = resolve
  _reject = reject
})

var server
var portfinder = require('portfinder')
portfinder.basePort = PORT

console.log('> Starting dev server...')
devMiddleware.waitUntilValid(() => {
  portfinder.getPort((err, port) => {
    if (err) {
      _reject(err)
    }
    process.env.PORT = port
    console.log('> Listening at ' + uri + '\n')
    // when env is testing, don't need open it
    if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {
      opn(uri)
    }
    server = app.listen(port)
    _resolve()
  })
})

module.exports = {
  ready: readyPromise,
  close: () => {
    server.close()
  }
}
